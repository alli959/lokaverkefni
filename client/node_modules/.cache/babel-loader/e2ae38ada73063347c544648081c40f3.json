{"ast":null,"code":"import _regeneratorRuntime from \"/home/alli959/Desktop/H\\xE1sl\\xF3li \\xCDslands 2-20191211T231337Z-001/H\\xE1sl\\xF3li \\xCDslands 2/lokaverkefni/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/alli959/Desktop/H\\xE1sl\\xF3li \\xCDslands 2-20191211T231337Z-001/H\\xE1sl\\xF3li \\xCDslands 2/lokaverkefni/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport api from '../api';\nexport var SANDWICH_REQUEST = 'SANDWICH_REQUEST';\nexport var SANDWICH_SUCCESS = 'SANDWICH_SUCCESS';\nexport var SANDWICH_FAILURE = 'SANDWICH_FAILURE';\nexport var SEARCH_SANDWICH_SUCCESS = 'SEARCH_SANDWICH_SUCCESS';\n\nfunction requestSandwich() {\n  return {\n    type: SANDWICH_REQUEST,\n    isFetching: true\n  };\n}\n\nfunction receiveSandwich(sandwich) {\n  return {\n    type: SANDWICH_SUCCESS,\n    isFetching: false,\n    sandwich: sandwich\n  };\n}\n\nfunction sandwichError(message) {\n  return {\n    type: SANDWICH_FAILURE,\n    isFetching: false,\n    message: message\n  };\n}\n\nexport var fetchSandwiches = function fetchSandwiches() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var endpoint, sandwiches;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                dispatch(requestSandwich());\n                endpoint = '/sandwiches';\n                _context.prev = 2;\n                _context.next = 5;\n                return api.get(endpoint);\n\n              case 5:\n                sandwiches = _context.sent;\n                _context.next = 11;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](2);\n                dispatch(sandwichError(_context.t0));\n\n              case 11:\n                if (sandwiches.status !== 200 || !sandwiches) {\n                  dispatch(sandwichError('fail'));\n                }\n\n                dispatch(receiveSandwich(sandwiches));\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 8]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};","map":{"version":3,"sources":["/home/alli959/Desktop/Háslóli Íslands 2-20191211T231337Z-001/Háslóli Íslands 2/lokaverkefni/client/src/actions/getSandwiches.js"],"names":["api","SANDWICH_REQUEST","SANDWICH_SUCCESS","SANDWICH_FAILURE","SEARCH_SANDWICH_SUCCESS","requestSandwich","type","isFetching","receiveSandwich","sandwich","sandwichError","message","fetchSandwiches","dispatch","endpoint","get","sandwiches","status"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,QAAhB;AAEA,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,uBAAuB,GAAG,yBAAhC;;AAGP,SAASC,eAAT,GAA2B;AACvB,SAAO;AACHC,IAAAA,IAAI,EAAEL,gBADH;AAEHM,IAAAA,UAAU,EAAE;AAFT,GAAP;AAIH;;AAED,SAASC,eAAT,CAAyBC,QAAzB,EAAmC;AAC/B,SAAO;AACLH,IAAAA,IAAI,EAAEJ,gBADD;AAELK,IAAAA,UAAU,EAAE,KAFP;AAGLE,IAAAA,QAAQ,EAARA;AAHK,GAAP;AAKD;;AAEH,SAASC,aAAT,CAAuBC,OAAvB,EAAgC;AAC5B,SAAO;AACLL,IAAAA,IAAI,EAAEH,gBADD;AAELI,IAAAA,UAAU,EAAE,KAFP;AAGLI,IAAAA,OAAO,EAAPA;AAHK,GAAP;AAKD;;AAGH,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AACjC;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAEHA,gBAAAA,QAAQ,CAACR,eAAe,EAAhB,CAAR;AAEIS,gBAAAA,QAJD,GAIY,aAJZ;AAAA;AAAA;AAAA,uBAQoBd,GAAG,CAACe,GAAJ,CAAQD,QAAR,CARpB;;AAAA;AAQCE,gBAAAA,UARD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAWCH,gBAAAA,QAAQ,CAACH,aAAa,aAAd,CAAR;;AAXD;AAcH,oBAAIM,UAAU,CAACC,MAAX,KAAsB,GAAtB,IAA6B,CAACD,UAAlC,EAA6C;AACzCH,kBAAAA,QAAQ,CAACH,aAAa,CAAC,MAAD,CAAd,CAAR;AACH;;AACDG,gBAAAA,QAAQ,CAACL,eAAe,CAACQ,UAAD,CAAhB,CAAR;;AAjBG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBH,CApBM","sourcesContent":["import api from '../api';\r\n\r\nexport const SANDWICH_REQUEST = 'SANDWICH_REQUEST';\r\nexport const SANDWICH_SUCCESS = 'SANDWICH_SUCCESS';\r\nexport const SANDWICH_FAILURE = 'SANDWICH_FAILURE';\r\nexport const SEARCH_SANDWICH_SUCCESS = 'SEARCH_SANDWICH_SUCCESS';\r\n\r\n\r\nfunction requestSandwich() {\r\n    return {\r\n        type: SANDWICH_REQUEST,\r\n        isFetching: true,\r\n    }\r\n}\r\n\r\nfunction receiveSandwich(sandwich) {\r\n    return {\r\n      type: SANDWICH_SUCCESS,\r\n      isFetching: false,\r\n      sandwich,\r\n    }\r\n  }\r\n\r\nfunction sandwichError(message) {\r\n    return {\r\n      type: SANDWICH_FAILURE,\r\n      isFetching: false,\r\n      message,\r\n    }\r\n  }\r\n\r\n\r\nexport const fetchSandwiches = () => {\r\n    return async (dispatch) => {\r\n\r\n        dispatch(requestSandwich());\r\n\r\n        let endpoint = '/sandwiches';\r\n\r\n        let sandwiches;\r\n        try{\r\n            sandwiches = await api.get(endpoint);\r\n            \r\n        } catch (error) {\r\n            dispatch(sandwichError(error));\r\n        }\r\n\r\n        if (sandwiches.status !== 200 || !sandwiches){\r\n            dispatch(sandwichError('fail'))\r\n        }\r\n        dispatch(receiveSandwich(sandwiches));\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}