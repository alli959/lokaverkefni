{"ast":null,"code":"import _regeneratorRuntime from \"/home/alli959/Desktop/H\\xE1sl\\xF3li \\xCDslands 2-20191211T231337Z-001/H\\xE1sl\\xF3li \\xCDslands 2/lokaverkefni/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/alli959/Desktop/H\\xE1sl\\xF3li \\xCDslands 2-20191211T231337Z-001/H\\xE1sl\\xF3li \\xCDslands 2/lokaverkefni/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport api from '../api';\nexport var ORDER_REQUEST = 'ORDER_REQUEST';\nexport var ORDER_SUCCESS = 'ORDER_SUCCESS';\nexport var ORDER_FAILURE = 'ORDER_FAILURE';\nexport var SEARCH_ORDER_SUCCESS = 'SEARCH_ORDER_SUCCESS';\n\nfunction requestOrder() {\n  return {\n    type: ORDER_REQUEST,\n    isFetching: true\n  };\n}\n\nfunction receiveOrder(order) {\n  return {\n    type: ORDER_SUCCESS,\n    isFetching: false,\n    order: order\n  };\n}\n\nfunction orderError(message) {\n  return {\n    type: ORDER_FAILURE,\n    isFetching: false,\n    message: message\n  };\n}\n\nexport var newOrders = function newOrders(order) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var endpoint, orders;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return dispatch(requestOrder());\n\n              case 2:\n                endpoint = '/orders';\n                _context.prev = 3;\n                _context.next = 6;\n                return api.post(endpoint, order);\n\n              case 6:\n                orders = _context.sent;\n                _context.next = 12;\n                break;\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](3);\n                dispatch(orderError(\"error\"));\n\n              case 12:\n                if (orders.status !== 200 || !orders) {\n                  dispatch(orderError('fail'));\n                }\n\n                dispatch(receiveOrder(orders));\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[3, 9]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};","map":{"version":3,"sources":["/home/alli959/Desktop/Háslóli Íslands 2-20191211T231337Z-001/Háslóli Íslands 2/lokaverkefni/client/src/actions/newOrder.js"],"names":["api","ORDER_REQUEST","ORDER_SUCCESS","ORDER_FAILURE","SEARCH_ORDER_SUCCESS","requestOrder","type","isFetching","receiveOrder","order","orderError","message","newOrders","dispatch","endpoint","post","orders","status"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,QAAhB;AAEA,OAAO,IAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,IAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,IAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,IAAMC,oBAAoB,GAAG,sBAA7B;;AAGP,SAASC,YAAT,GAAwB;AACpB,SAAO;AACHC,IAAAA,IAAI,EAAEL,aADH;AAEHM,IAAAA,UAAU,EAAE;AAFT,GAAP;AAIH;;AAED,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AACzB,SAAO;AACLH,IAAAA,IAAI,EAAEJ,aADD;AAELK,IAAAA,UAAU,EAAE,KAFP;AAGLE,IAAAA,KAAK,EAALA;AAHK,GAAP;AAKD;;AAEH,SAASC,UAAT,CAAoBC,OAApB,EAA6B;AACzB,SAAO;AACLL,IAAAA,IAAI,EAAEH,aADD;AAELI,IAAAA,UAAU,EAAE,KAFP;AAGLI,IAAAA,OAAO,EAAPA;AAHK,GAAP;AAKD;;AAGH,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACH,KAAD,EAAW;AAChC;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,iBAAOI,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEGA,QAAQ,CAACR,YAAY,EAAb,CAFX;;AAAA;AAICS,gBAAAA,QAJD,GAIY,SAJZ;AAAA;AAAA;AAAA,uBAQgBd,GAAG,CAACe,IAAJ,CAASD,QAAT,EAAmBL,KAAnB,CARhB;;AAAA;AAQCO,gBAAAA,MARD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUCH,gBAAAA,QAAQ,CAACH,UAAU,CAAC,OAAD,CAAX,CAAR;;AAVD;AAYH,oBAAIM,MAAM,CAACC,MAAP,KAAkB,GAAlB,IAAyB,CAACD,MAA9B,EAAqC;AACjCH,kBAAAA,QAAQ,CAACH,UAAU,CAAC,MAAD,CAAX,CAAR;AACH;;AACDG,gBAAAA,QAAQ,CAACL,YAAY,CAACQ,MAAD,CAAb,CAAR;;AAfG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBH,CAlBM","sourcesContent":["import api from '../api';\r\n\r\nexport const ORDER_REQUEST = 'ORDER_REQUEST';\r\nexport const ORDER_SUCCESS = 'ORDER_SUCCESS';\r\nexport const ORDER_FAILURE = 'ORDER_FAILURE';\r\nexport const SEARCH_ORDER_SUCCESS = 'SEARCH_ORDER_SUCCESS';\r\n\r\n\r\nfunction requestOrder() {\r\n    return {\r\n        type: ORDER_REQUEST,\r\n        isFetching: true,\r\n    }\r\n}\r\n\r\nfunction receiveOrder(order) {\r\n    return {\r\n      type: ORDER_SUCCESS,\r\n      isFetching: false,\r\n      order,\r\n    }\r\n  }\r\n\r\nfunction orderError(message) {\r\n    return {\r\n      type: ORDER_FAILURE,\r\n      isFetching: false,\r\n      message,\r\n    }\r\n  }\r\n\r\n\r\nexport const newOrders = (order) => {\r\n    return async (dispatch) => {\r\n\r\n        await dispatch(requestOrder());\r\n\r\n        let endpoint = '/orders';\r\n\r\n        let orders;\r\n        try{\r\n            orders = await api.post(endpoint, order);\r\n        } catch (error) {\r\n            dispatch(orderError(\"error\"));\r\n        }\r\n        if (orders.status !== 200 || !orders){\r\n            dispatch(orderError('fail'))\r\n        }\r\n        dispatch(receiveOrder(orders));\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}